// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// q_fn
arma::vec q_fn(arma::vec R, arma::vec p, arma::mat trans, double lambda, double phi, int n, std::string cont_type, arma::vec G, arma::vec q_e, arma::mat def);
RcppExport SEXP debtLimits_q_fn(SEXP RSEXP, SEXP pSEXP, SEXP transSEXP, SEXP lambdaSEXP, SEXP phiSEXP, SEXP nSEXP, SEXP cont_typeSEXP, SEXP GSEXP, SEXP q_eSEXP, SEXP defSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type trans(transSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::string >::type cont_type(cont_typeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type q_e(q_eSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    rcpp_result_gen = Rcpp::wrap(q_fn(R, p, trans, lambda, phi, n, cont_type, G, q_e, def));
    return rcpp_result_gen;
END_RCPP
}
// v_surp
arma::vec v_surp(arma::vec d, arma::vec coeff, arma::vec G, bool tri);
RcppExport SEXP debtLimits_v_surp(SEXP dSEXP, SEXP coeffSEXP, SEXP GSEXP, SEXP triSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type G(GSEXP);
    Rcpp::traits::input_parameter< bool >::type tri(triSEXP);
    rcpp_result_gen = Rcpp::wrap(v_surp(d, coeff, G, tri));
    return rcpp_result_gen;
END_RCPP
}
// surp
double surp(double d, arma::vec coeff, double G, bool tri);
RcppExport SEXP debtLimits_surp(SEXP dSEXP, SEXP coeffSEXP, SEXP GSEXP, SEXP triSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< double >::type G(GSEXP);
    Rcpp::traits::input_parameter< bool >::type tri(triSEXP);
    rcpp_result_gen = Rcpp::wrap(surp(d, coeff, G, tri));
    return rcpp_result_gen;
END_RCPP
}
// surp_poly
double surp_poly(double d, arma::vec coeff, double G);
RcppExport SEXP debtLimits_surp_poly(SEXP dSEXP, SEXP coeffSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< double >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(surp_poly(d, coeff, G));
    return rcpp_result_gen;
END_RCPP
}
// surp_tri
double surp_tri(double d, arma::vec coeff, double G);
RcppExport SEXP debtLimits_surp_tri(SEXP dSEXP, SEXP coeffSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< double >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(surp_tri(d, coeff, G));
    return rcpp_result_gen;
END_RCPP
}
// d_surp_tri
double d_surp_tri(double d, arma::vec coeff, double G);
RcppExport SEXP debtLimits_d_surp_tri(SEXP dSEXP, SEXP coeffSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< double >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(d_surp_tri(d, coeff, G));
    return rcpp_result_gen;
END_RCPP
}
// d_triangle
double d_triangle(double x, double a, double b, double c);
RcppExport SEXP debtLimits_d_triangle(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(d_triangle(x, a, b, c));
    return rcpp_result_gen;
END_RCPP
}
// p_triangle
double p_triangle(double x, double a, double b, double c);
RcppExport SEXP debtLimits_p_triangle(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(p_triangle(x, a, b, c));
    return rcpp_result_gen;
END_RCPP
}
// d_triangle2
double d_triangle2(double x, double a, double b, double c);
RcppExport SEXP debtLimits_d_triangle2(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(d_triangle2(x, a, b, c));
    return rcpp_result_gen;
END_RCPP
}
// zed
arma::vec zed(arma::vec p, arma::vec d, List params, arma::vec qd, arma::vec qe, arma::mat def);
RcppExport SEXP debtLimits_zed(SEXP pSEXP, SEXP dSEXP, SEXP paramsSEXP, SEXP qdSEXP, SEXP qeSEXP, SEXP defSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type qd(qdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type qe(qeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    rcpp_result_gen = Rcpp::wrap(zed(p, d, params, qd, qe, def));
    return rcpp_result_gen;
END_RCPP
}
// zed_2
arma::mat zed_2(arma::vec p, arma::vec d, List params, arma::vec qd, arma::vec qe, arma::mat def);
RcppExport SEXP debtLimits_zed_2(SEXP pSEXP, SEXP dSEXP, SEXP paramsSEXP, SEXP qdSEXP, SEXP qeSEXP, SEXP defSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type qd(qdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type qe(qeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    rcpp_result_gen = Rcpp::wrap(zed_2(p, d, params, qd, qe, def));
    return rcpp_result_gen;
END_RCPP
}
// zed_2_num
arma::mat zed_2_num(arma::vec p, arma::vec d, List params, arma::vec qd, arma::vec qe, arma::mat def);
RcppExport SEXP debtLimits_zed_2_num(SEXP pSEXP, SEXP dSEXP, SEXP paramsSEXP, SEXP qdSEXP, SEXP qeSEXP, SEXP defSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type qd(qdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type qe(qeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    rcpp_result_gen = Rcpp::wrap(zed_2_num(p, d, params, qd, qe, def));
    return rcpp_result_gen;
END_RCPP
}
// zed_2_num_d_i
double zed_2_num_d_i(arma::vec p, arma::vec d, List params, int i, arma::vec qd, arma::vec qe, arma::mat def);
RcppExport SEXP debtLimits_zed_2_num_d_i(SEXP pSEXP, SEXP dSEXP, SEXP paramsSEXP, SEXP iSEXP, SEXP qdSEXP, SEXP qeSEXP, SEXP defSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type qd(qdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type qe(qeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    rcpp_result_gen = Rcpp::wrap(zed_2_num_d_i(p, d, params, i, qd, qe, def));
    return rcpp_result_gen;
END_RCPP
}
