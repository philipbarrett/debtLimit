// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// d_grid_fn
arma::vec d_grid_fn(arma::vec d, double x_sd, double x_sd_mult, int n_pts);
RcppExport SEXP debtLimits_d_grid_fn(SEXP dSEXP, SEXP x_sdSEXP, SEXP x_sd_multSEXP, SEXP n_ptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type x_sd(x_sdSEXP);
    Rcpp::traits::input_parameter< double >::type x_sd_mult(x_sd_multSEXP);
    Rcpp::traits::input_parameter< int >::type n_pts(n_ptsSEXP);
    rcpp_result_gen = Rcpp::wrap(d_grid_fn(d, x_sd, x_sd_mult, n_pts));
    return rcpp_result_gen;
END_RCPP
}
// e_grid_fn
arma::vec e_grid_fn(double x_sd, int n_pts);
RcppExport SEXP debtLimits_e_grid_fn(SEXP x_sdSEXP, SEXP n_ptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x_sd(x_sdSEXP);
    Rcpp::traits::input_parameter< int >::type n_pts(n_ptsSEXP);
    rcpp_result_gen = Rcpp::wrap(e_grid_fn(x_sd, n_pts));
    return rcpp_result_gen;
END_RCPP
}
// Q_init
arma::mat Q_init(arma::vec d_grid, arma::vec d, arma::vec R);
RcppExport SEXP debtLimits_Q_init(SEXP d_gridSEXP, SEXP dSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type d_grid(d_gridSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(Q_init(d_grid, d, R));
    return rcpp_result_gen;
END_RCPP
}
// p_init_d_i
double p_init_d_i(List params, arma::vec p, arma::vec d, arma::vec An, arma::vec Bn, arma::vec Cn, arma::mat def, int i);
RcppExport SEXP debtLimits_p_init_d_i(SEXP paramsSEXP, SEXP pSEXP, SEXP dSEXP, SEXP AnSEXP, SEXP BnSEXP, SEXP CnSEXP, SEXP defSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type An(AnSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Bn(BnSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Cn(CnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(p_init_d_i(params, p, d, An, Bn, Cn, def, i));
    return rcpp_result_gen;
END_RCPP
}
// p_init_d
arma::vec p_init_d(List params, arma::vec p, arma::vec d, arma::vec An, arma::vec Bn, arma::vec Cn, arma::mat def);
RcppExport SEXP debtLimits_p_init_d(SEXP paramsSEXP, SEXP pSEXP, SEXP dSEXP, SEXP AnSEXP, SEXP BnSEXP, SEXP CnSEXP, SEXP defSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type An(AnSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Bn(BnSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Cn(CnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    rcpp_result_gen = Rcpp::wrap(p_init_d(params, p, d, An, Bn, Cn, def));
    return rcpp_result_gen;
END_RCPP
}
// q_fn
arma::vec q_fn(arma::vec R, arma::vec p, arma::mat trans, double lambda, double phi, int n, std::string cont_type, arma::vec G, arma::vec An, arma::mat def);
RcppExport SEXP debtLimits_q_fn(SEXP RSEXP, SEXP pSEXP, SEXP transSEXP, SEXP lambdaSEXP, SEXP phiSEXP, SEXP nSEXP, SEXP cont_typeSEXP, SEXP GSEXP, SEXP AnSEXP, SEXP defSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type trans(transSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::string >::type cont_type(cont_typeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type An(AnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    rcpp_result_gen = Rcpp::wrap(q_fn(R, p, trans, lambda, phi, n, cont_type, G, An, def));
    return rcpp_result_gen;
END_RCPP
}
// q_d_p
arma::mat q_d_p(arma::vec R, arma::vec p, arma::mat trans, double lambda, double phi, int n, std::string cont_type, std::string d_type, arma::vec G, arma::vec An, arma::vec Bn, arma::mat def);
RcppExport SEXP debtLimits_q_d_p(SEXP RSEXP, SEXP pSEXP, SEXP transSEXP, SEXP lambdaSEXP, SEXP phiSEXP, SEXP nSEXP, SEXP cont_typeSEXP, SEXP d_typeSEXP, SEXP GSEXP, SEXP AnSEXP, SEXP BnSEXP, SEXP defSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type trans(transSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::string >::type cont_type(cont_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type d_type(d_typeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type An(AnSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Bn(BnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    rcpp_result_gen = Rcpp::wrap(q_d_p(R, p, trans, lambda, phi, n, cont_type, d_type, G, An, Bn, def));
    return rcpp_result_gen;
END_RCPP
}
// q_d_p_num_i
arma::vec q_d_p_num_i(arma::vec R, arma::vec p, arma::mat trans, double lambda, double phi, int n, int i, std::string cont_type, arma::vec G, arma::vec An, arma::mat def);
RcppExport SEXP debtLimits_q_d_p_num_i(SEXP RSEXP, SEXP pSEXP, SEXP transSEXP, SEXP lambdaSEXP, SEXP phiSEXP, SEXP nSEXP, SEXP iSEXP, SEXP cont_typeSEXP, SEXP GSEXP, SEXP AnSEXP, SEXP defSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type trans(transSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< std::string >::type cont_type(cont_typeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type An(AnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    rcpp_result_gen = Rcpp::wrap(q_d_p_num_i(R, p, trans, lambda, phi, n, i, cont_type, G, An, def));
    return rcpp_result_gen;
END_RCPP
}
// d_prime
arma::mat d_prime(int i_x, double d, arma::vec d_bar, double qhat, arma::mat Q, arma::vec d_grid, arma::vec G, double lambda, arma::vec e_grid, arma::vec coeff, bool tri, arma::mat D_prime_0, bool D_prime_0_flag, bool verbose, double tol, int maxit);
RcppExport SEXP debtLimits_d_prime(SEXP i_xSEXP, SEXP dSEXP, SEXP d_barSEXP, SEXP qhatSEXP, SEXP QSEXP, SEXP d_gridSEXP, SEXP GSEXP, SEXP lambdaSEXP, SEXP e_gridSEXP, SEXP coeffSEXP, SEXP triSEXP, SEXP D_prime_0SEXP, SEXP D_prime_0_flagSEXP, SEXP verboseSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i_x(i_xSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d_bar(d_barSEXP);
    Rcpp::traits::input_parameter< double >::type qhat(qhatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d_grid(d_gridSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type e_grid(e_gridSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< bool >::type tri(triSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D_prime_0(D_prime_0SEXP);
    Rcpp::traits::input_parameter< bool >::type D_prime_0_flag(D_prime_0_flagSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(d_prime(i_x, d, d_bar, qhat, Q, d_grid, G, lambda, e_grid, coeff, tri, D_prime_0, D_prime_0_flag, verbose, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// q_e
arma::vec q_e(double d, arma::vec d_bar, double qhat, arma::mat Q, arma::vec d_grid, arma::vec G, double lambda, arma::vec e_grid, arma::vec coeff, bool tri, arma::mat D_prime_0, bool D_prime_0_flag, arma::mat trans, bool verbose, double tol, int maxit);
RcppExport SEXP debtLimits_q_e(SEXP dSEXP, SEXP d_barSEXP, SEXP qhatSEXP, SEXP QSEXP, SEXP d_gridSEXP, SEXP GSEXP, SEXP lambdaSEXP, SEXP e_gridSEXP, SEXP coeffSEXP, SEXP triSEXP, SEXP D_prime_0SEXP, SEXP D_prime_0_flagSEXP, SEXP transSEXP, SEXP verboseSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d_bar(d_barSEXP);
    Rcpp::traits::input_parameter< double >::type qhat(qhatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d_grid(d_gridSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type e_grid(e_gridSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< bool >::type tri(triSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D_prime_0(D_prime_0SEXP);
    Rcpp::traits::input_parameter< bool >::type D_prime_0_flag(D_prime_0_flagSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type trans(transSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(q_e(d, d_bar, qhat, Q, d_grid, G, lambda, e_grid, coeff, tri, D_prime_0, D_prime_0_flag, trans, verbose, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// q_iter_fn
arma::vec q_iter_fn(double d, arma::vec p, arma::vec d_bar, double qhat, arma::mat Q, arma::vec d_grid, arma::vec R, arma::vec G, double lambda, double phi, arma::vec e_grid, arma::vec coeff, bool tri, arma::mat D_prime_0, bool D_prime_0_flag, arma::mat trans, bool verbose, double tol, int maxit, double d_tol, int d_maxit);
RcppExport SEXP debtLimits_q_iter_fn(SEXP dSEXP, SEXP pSEXP, SEXP d_barSEXP, SEXP qhatSEXP, SEXP QSEXP, SEXP d_gridSEXP, SEXP RSEXP, SEXP GSEXP, SEXP lambdaSEXP, SEXP phiSEXP, SEXP e_gridSEXP, SEXP coeffSEXP, SEXP triSEXP, SEXP D_prime_0SEXP, SEXP D_prime_0_flagSEXP, SEXP transSEXP, SEXP verboseSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP d_tolSEXP, SEXP d_maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d_bar(d_barSEXP);
    Rcpp::traits::input_parameter< double >::type qhat(qhatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d_grid(d_gridSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type e_grid(e_gridSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< bool >::type tri(triSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D_prime_0(D_prime_0SEXP);
    Rcpp::traits::input_parameter< bool >::type D_prime_0_flag(D_prime_0_flagSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type trans(transSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type d_tol(d_tolSEXP);
    Rcpp::traits::input_parameter< int >::type d_maxit(d_maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(q_iter_fn(d, p, d_bar, qhat, Q, d_grid, R, G, lambda, phi, e_grid, coeff, tri, D_prime_0, D_prime_0_flag, trans, verbose, tol, maxit, d_tol, d_maxit));
    return rcpp_result_gen;
END_RCPP
}
// v_surp
arma::vec v_surp(arma::vec d, arma::vec coeff, arma::vec G, bool tri);
RcppExport SEXP debtLimits_v_surp(SEXP dSEXP, SEXP coeffSEXP, SEXP GSEXP, SEXP triSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type G(GSEXP);
    Rcpp::traits::input_parameter< bool >::type tri(triSEXP);
    rcpp_result_gen = Rcpp::wrap(v_surp(d, coeff, G, tri));
    return rcpp_result_gen;
END_RCPP
}
// surp
double surp(double d, arma::vec coeff, double G, bool tri);
RcppExport SEXP debtLimits_surp(SEXP dSEXP, SEXP coeffSEXP, SEXP GSEXP, SEXP triSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< double >::type G(GSEXP);
    Rcpp::traits::input_parameter< bool >::type tri(triSEXP);
    rcpp_result_gen = Rcpp::wrap(surp(d, coeff, G, tri));
    return rcpp_result_gen;
END_RCPP
}
// surp_poly
double surp_poly(double d, arma::vec coeff, double G);
RcppExport SEXP debtLimits_surp_poly(SEXP dSEXP, SEXP coeffSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< double >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(surp_poly(d, coeff, G));
    return rcpp_result_gen;
END_RCPP
}
// surp_tri
double surp_tri(double d, arma::vec coeff, double G);
RcppExport SEXP debtLimits_surp_tri(SEXP dSEXP, SEXP coeffSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< double >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(surp_tri(d, coeff, G));
    return rcpp_result_gen;
END_RCPP
}
// d_surp_tri
double d_surp_tri(double d, arma::vec coeff, double G);
RcppExport SEXP debtLimits_d_surp_tri(SEXP dSEXP, SEXP coeffSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< double >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(d_surp_tri(d, coeff, G));
    return rcpp_result_gen;
END_RCPP
}
// d_triangle
double d_triangle(double x, double a, double b, double c);
RcppExport SEXP debtLimits_d_triangle(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(d_triangle(x, a, b, c));
    return rcpp_result_gen;
END_RCPP
}
// p_triangle
double p_triangle(double x, double a, double b, double c);
RcppExport SEXP debtLimits_p_triangle(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(p_triangle(x, a, b, c));
    return rcpp_result_gen;
END_RCPP
}
// d_triangle2
double d_triangle2(double x, double a, double b, double c);
RcppExport SEXP debtLimits_d_triangle2(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(d_triangle2(x, a, b, c));
    return rcpp_result_gen;
END_RCPP
}
// zed
arma::vec zed(arma::vec p, arma::vec d, List params, arma::vec An, arma::vec Cn, arma::mat def);
RcppExport SEXP debtLimits_zed(SEXP pSEXP, SEXP dSEXP, SEXP paramsSEXP, SEXP AnSEXP, SEXP CnSEXP, SEXP defSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type An(AnSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Cn(CnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    rcpp_result_gen = Rcpp::wrap(zed(p, d, params, An, Cn, def));
    return rcpp_result_gen;
END_RCPP
}
// zed_2
arma::mat zed_2(arma::vec p, arma::vec d, List params, arma::vec An, arma::vec Bn, arma::vec Cn, arma::mat def);
RcppExport SEXP debtLimits_zed_2(SEXP pSEXP, SEXP dSEXP, SEXP paramsSEXP, SEXP AnSEXP, SEXP BnSEXP, SEXP CnSEXP, SEXP defSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type An(AnSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Bn(BnSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Cn(CnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    rcpp_result_gen = Rcpp::wrap(zed_2(p, d, params, An, Bn, Cn, def));
    return rcpp_result_gen;
END_RCPP
}
// zed_2_num
arma::mat zed_2_num(arma::vec p, arma::vec d, List params, arma::vec Cn, arma::vec An, arma::mat def);
RcppExport SEXP debtLimits_zed_2_num(SEXP pSEXP, SEXP dSEXP, SEXP paramsSEXP, SEXP CnSEXP, SEXP AnSEXP, SEXP defSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Cn(CnSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type An(AnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    rcpp_result_gen = Rcpp::wrap(zed_2_num(p, d, params, Cn, An, def));
    return rcpp_result_gen;
END_RCPP
}
// zed_2_num_d_i
double zed_2_num_d_i(arma::vec p, arma::vec d, List params, int i, arma::vec An, arma::vec Cn, arma::mat def);
RcppExport SEXP debtLimits_zed_2_num_d_i(SEXP pSEXP, SEXP dSEXP, SEXP paramsSEXP, SEXP iSEXP, SEXP AnSEXP, SEXP CnSEXP, SEXP defSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type An(AnSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Cn(CnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    rcpp_result_gen = Rcpp::wrap(zed_2_num_d_i(p, d, params, i, An, Cn, def));
    return rcpp_result_gen;
END_RCPP
}
// zed_2_ana
arma::mat zed_2_ana(arma::vec p, arma::vec d, List params, arma::vec An, arma::vec Bn, arma::vec Cn, arma::mat def);
RcppExport SEXP debtLimits_zed_2_ana(SEXP pSEXP, SEXP dSEXP, SEXP paramsSEXP, SEXP AnSEXP, SEXP BnSEXP, SEXP CnSEXP, SEXP defSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type An(AnSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Bn(BnSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Cn(CnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type def(defSEXP);
    rcpp_result_gen = Rcpp::wrap(zed_2_ana(p, d, params, An, Bn, Cn, def));
    return rcpp_result_gen;
END_RCPP
}
